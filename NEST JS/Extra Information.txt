Nest.js - is a framework for building effiecient , scalabke and maintainable Node.js server side application 
Nest.js provides application architecture , configuratiin and the layer of abstraction above common Nide.js web framework wuth freedom of customization to create application . The architecture is heavily inspired by angular 

Prerequistic 
------------
JavaScript 
TypeScript 
Rsjs 
Node.js 
HTTP Server 
Client-Server Arch 
Rest Api 
MVC (Optional)

Web Frameowork 
Express (Default)
Fastify (optional)

we can use other web Framework also 
beause Nestjs is platform-agnostic 




Nest js Architecture 
-------------------

Client ------><------ Server 



              Middleware  (request time work )                                  ------>Request handler 
              Gurad (help in any request to handle) 
 client --->  Interceptor (request and response time work )           Controller -----> Request Handler      Server
              Pipe (transfomation k lia use kia jata hai)
                           Global                                               ------> Request Handler 


Scope 
Global 
Modular 
Controller
Resquest Handler ? Routes 


Exception Filter -> khi vi kisi vi time error ko handle kr leta hai 
----------------

Middleware and Interceptor diffrenece in Nest.js
------------------------------------------------
In Nest.js, middleware and interceptors are both used to handle requests and perform actions before or 
after the request reaches its intended route handler.
 However, there are some key differences between the two:

Middleware are functions that are executed before the request reaches the route handler.
 They can be used to perform a variety of tasks, such as validating the request, modifying the request, 
 or even short-circuiting the request if certain conditions are not met.
 Middleware are defined at the application level and are applied to specific routes or groups of routes.

Interceptors, on the other hand, are used to perform actions before and after the route handler is executed. 
They can be used to handle cross-cutting concerns, such as logging, exception handling, and data transformation. Unlike middleware, 
interceptors are defined at the controller level and are applied to all routes within the controller.

In summary, Middleware are like global guards that can be applied to specific routes,
 whereas interceptors are more like cross-cutting concerns that are applied to all routes within a controller.




Application Structure 
1. Modules With Controller 
2. Modules Without Controller

Modules 
1. Inport 
2. Controller 
3. Export 
4. Providers





controller
--------
In Nest.js, a controller is a class that handles incoming HTTP requests and returns a response. 
Controllers are responsible for handling specific routes and defining the logic for handling those routes. 
They use decorators, such as @Get, @Post, etc., to define the type of HTTP request they handle,
 and use methods to handle the request and return a response.
  Controllers in Nest.js are used to handle HTTP requests and interact with the underlying services and
   repositories to perform the necessary actions and 
   return the appropriate response.

Routing Mechanism 
-----------------
In Nest.js, routing is the process of determining how an application responds to a client request to a particular endpoint, based on the HTTP method and the URI. 
Nest.js uses a powerful routing system that allows developers to define routes and their corresponding handlers in a flexible and organized way.

Routes in Nest.js are defined using decorators, such as @Get, @Post, @Put, @Delete, etc., on the controller methods.
 These decorators specify the type of HTTP method that the route handles, and the route's path is defined by the controller method's endpoint.

For example, the following code defines a route that handles GET requests to the '/users' endpoint:

@Controller('users')
export class UsersController {
  @Get()
  findAll(): string {
    return 'This action returns all users';
  }
}

Nest.js also supports dynamic routes, where a part of the route path is determined at runtime. This is achieved by using a colon (:) 
followed by a parameter name in the route's path.

Additionally, Nest.js also allows you to use different middlewares that can be used to perform various actions before the request is handled by the controller.
 Nest.js middlewares are also defined using decorators, such as @Use, @UsePipes, and so on.

Overall, Nest.js routing system provides a simple and flexible way to define routes, handle different types of requests, 
and perform additional actions before the request is handled by the controller.







Decorators
----------
In Nest.js, decorators are a way to add additional behavior or metadata to a class, method, or property. 
They are a feature of the TypeScript programming language and are used to extend the functionality of Nest.js.

Nest.js provides several built-in decorators that can be used to define the behavior of controllers, services, pipes, guards, and other components.
 Some examples of these decorators include:

@Controller: Used to define a class as a controller, and handle incoming HTTP requests.
@Get, @Post, @Put, @Delete: Used to define the type of HTTP request that a controller method handles.
@Use: Used to apply middleware to a controller or route.
@UsePipes: Used to apply pipes to a controller method or route.
@UseGuards: Used to apply guards to a controller method or route.
Here is an example of how to use some decorators in a controller class:

Copy code
@Controller('users')
export class UsersController {
  @Get()
  @UsePipes(new ValidationPipe())
  @UseGuards(AuthGuard)
  findAll(): string {
    return 'This action returns all users';
  }
}
In this example, the @Controller decorator is used to define the UsersController class as a controller,
 the @Get decorator is used to define the findAll() method as a route that handles GET requests, 
 the @UsePipes decorator is used to apply the ValidationPipe to the findAll() method, and the @UseGuards
  decorator is used to apply the AuthGuard to the findAll() method.

Overall, decorators in Nest.js are a powerful feature that allows you to add additional behavior 
and metadata to your classes, methods, and properties, making it easier to organize and maintain your code.









-----------------------------------------------------

install nest new project -> npm instal @nestjs/cli@latest

nest new ninja-api 
now select your terminal npm / yarn etc


create a new module 
use -> nest generate module ninjas
or nest g module ninjas

create a new controller 
nest g controller ninja

create a new services
nest g service ninja

generate CURD operations 
nest g resourse users 







